from datetime import datetime, timedelta

from sqlalchemy import select, text
from sqlalchemy.sql.functions import current_time

from config import bot, ADMIN_ID
from database.models import Subscription
from database.session import AsyncSessionLocal, get_db_session
import asyncio


async def check_subscriptions():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            async with AsyncSessionLocal() as session:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                result = await session.execute(text("SELECT 1"))
                print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã: {result.scalar()}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}")

            # 2. –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞–¥–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å
            expired_result = await session.execute(
                select(Subscription)
                .where(Subscription.status == 'active')
                .where(Subscription.end_date <= current_time)
            )
            expired_subscriptions = expired_result.scalars().all()

            for subscription in expired_subscriptions:
                subscription.status = 'expired'
                subscription.updated_at = datetime.utcnow()
                print(f"üî¥ –ü–æ–¥–ø–∏—Å–∫–∞ {subscription.id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞)")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                try:
                    await bot.send_message(
                        subscription.user.telegram_id,
                        "‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å</b>\n\n"
                        "–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
                        "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏: {e}")

        await asyncio.sleep(24 * 3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å


async def send_daily_report():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
    while True:
        try:
            async with AsyncSessionLocal() as session:
                # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
                result = await session.execute(text("SELECT COUNT(*) FROM information_schema.tables"))
                table_count = result.scalar()
                print(f"üìä –í –±–∞–∑–µ {table_count} —Ç–∞–±–ª–∏—Ü")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {e}")

        await asyncio.sleep(24 * 3600)  # –†–∞–∑ –≤ –¥–µ–Ω—å


async def send_daily_report():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"""
    while True:
        try:
            async with get_db_session() as session:
                current_time = datetime.utcnow()

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                active_result = await session.execute(
                    select(Subscription)
                    .where(Subscription.status == 'active')
                    .where(Subscription.end_date > current_time)
                )
                active_count = len(active_result.scalars().all())

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                expiring_result = await session.execute(
                    select(Subscription)
                    .where(Subscription.status == 'active')
                    .where(Subscription.end_date <= current_time + timedelta(days=3))
                    .where(Subscription.end_date > current_time)
                )
                expiring_count = len(expiring_result.scalars().all())

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
                if ADMIN_ID:
                    report_text = (
                        f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º</b>\n\n"
                        f"üìÖ –î–∞—Ç–∞: {current_time.strftime('%d.%m.%Y')}\n"
                        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_count}\n"
                        f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π: {expiring_count}\n"
                        f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {len([s for s in expiring_result.scalars().all() if s.auto_renew])}"
                    )

                    try:
                        await bot.send_message(ADMIN_ID, report_text, parse_mode='HTML')
                        print("üìä –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_daily_report: {e}")

        await asyncio.sleep(24 * 3600)


async def start_background_tasks():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    asyncio.create_task(check_subscriptions())
    asyncio.create_task(send_daily_report())
    print("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
