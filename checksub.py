from datetime import datetime, timedelta
from sqlalchemy import select, text
from sqlalchemy.sql import func
import asyncio

from config import ADMIN_ID
from database.models import Subscription, User
from database.session import AsyncSessionLocal, get_db_session
from config import bot  # –ò–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞


async def check_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            async with AsyncSessionLocal() as session:
                # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
                result = await session.execute(text("SELECT 1"))
                print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã: {result.scalar()}")

                # 2. –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                current_time = datetime.utcnow()
                expired_result = await session.execute(
                    select(Subscription)
                    .where(Subscription.status == 'active')
                    .where(Subscription.end_date <= current_time)
                )
                expired_subscriptions = expired_result.scalars().all()

                for subscription in expired_subscriptions:
                    subscription.status = 'expired'
                    subscription.updated_at = datetime.utcnow()
                    print(f"üî¥ –ü–æ–¥–ø–∏—Å–∫–∞ {subscription.id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞)")

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    user_result = await session.execute(
                        select(User).where(User.id == subscription.user_id)
                    )
                    user = user_result.scalar_one_or_none()

                    if user:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                        try:
                            await bot.send_message(
                                user.telegram_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –≤–º–µ—Å—Ç–æ user.id
                                "‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å</b>\n\n"
                                "–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
                                "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.",
                                parse_mode='HTML'
                            )
                            print(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

                # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
                if expired_subscriptions:
                    await session.commit()
                    print(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(expired_subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_subscriptions: {e}")

        await asyncio.sleep(24 * 3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å


async def send_daily_report():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"""
    while True:
        try:
            async with AsyncSessionLocal() as session:
                current_time = datetime.utcnow()

                active_result = await session.execute(
                    select(Subscription)
                    .where(Subscription.status == 'active')
                    .where(Subscription.end_date > current_time)
                )
                active_subscriptions = active_result.scalars().all()
                active_count = len(active_subscriptions)

                expiring_result = await session.execute(
                    select(Subscription)
                    .where(Subscription.status == 'active')
                    .where(Subscription.end_date <= current_time + timedelta(days=3))
                    .where(Subscription.end_date > current_time)
                )
                expiring_subscriptions = expiring_result.scalars().all()
                expiring_count = len(expiring_subscriptions)

                auto_renew_count = 0
                for sub in expiring_subscriptions:
                    if hasattr(sub, 'auto_renew') and sub.auto_renew:
                        auto_renew_count += 1

                if ADMIN_ID:
                    report_text = (
                        f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º</b>\n\n"
                        f"üìÖ –î–∞—Ç–∞: {current_time.strftime('%d.%m.%Y %H:%M')}\n"
                        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_count}\n"
                        f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π: {expiring_count}\n"
                        f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {auto_renew_count}"
                    )

                    try:
                        await bot.send_message(ADMIN_ID, report_text, parse_mode='HTML')
                        print("üìä –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_daily_report: {e}")

        await asyncio.sleep(24 * 3600)


async def check_expiring_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç (–∑–∞ 1-2 –¥–Ω—è)"""
    while True:
        try:
            async with AsyncSessionLocal() as session:
                current_time = datetime.utcnow()

                expiring_soon_result = await session.execute(
                    select(Subscription)
                    .join(User, Subscription.user_id == User.id)
                    .where(Subscription.status == 'active')
                    .where(Subscription.end_date <= current_time + timedelta(days=2))
                    .where(Subscription.end_date > current_time + timedelta(days=1))
                )
                expiring_soon_subs = expiring_soon_result.scalars().all()

                for subscription in expiring_soon_subs:
                    try:
                        await bot.send_message(
                            subscription.user.telegram_id,
                            "‚ö†Ô∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!</b>\n\n"
                            f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {subscription.end_date.strftime('%d.%m.%Y')}\n"
                            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {(subscription.end_date - current_time).days} –¥–Ω–µ–π\n\n"
                            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
                            parse_mode='HTML'
                        )
                        print(f"üìß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.user.telegram_id}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_expiring_subscriptions: {e}")

        await asyncio.sleep(12 * 3600)


async def start_background_tasks():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    asyncio.create_task(check_subscriptions())
    asyncio.create_task(send_daily_report())
    asyncio.create_task(check_expiring_subscriptions())
    print("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")