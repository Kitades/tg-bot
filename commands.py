from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from sqlalchemy import select

from config import ADMIN_ID, SUBSCRIPTION_PRICE
from database.models import User, Subscription
from database.session import get_db_session
from keyboard import main_keyboard, show_tariff_selection

router = Router()

# –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫
PRICES = {
    'regular': 8000.00,
    'student': 5000.00
}


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    telegram_user = message.from_user

    async with get_db_session() as session:
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from sqlalchemy import select
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_user.id)
            )
            user = result.first()

            if not user:
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                user = User(
                    telegram_id=telegram_user.id,
                    username=telegram_user.username,
                    full_name=f"{telegram_user.first_name or ''} {telegram_user.last_name or ''}".strip()
                )
                session.add(user)
                await session.commit()
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {telegram_user.id}")

            await session.commit()
            await session.refresh(user)

            has_active_sub = await check_active_subscription(user.user_id)
            welcome_text = f""

            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                f"üí∞ –£—á–∞—Å—Ç–∏–µ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –ø–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ - {SUBSCRIPTION_PRICE[1]} —Ä—É–± –≤ –º–µ—Å—è—Ü\n"
                f"üéì –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ - {SUBSCRIPTION_PRICE[0]} —Ä—É–± –≤ –º–µ—Å—è—Ü",

            )
            if has_active_sub:
                sub_info = await get_subscription_info(user.user_id)
                welcome_text += f"\n\nüéâ <b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {sub_info['end_date']}</b>"
            else:
                welcome_text += "\n\nüìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É"

            await message.answer(
                welcome_text,
                parse_mode='HTML',
                reply_markup=await main_keyboard(has_active_sub)
            )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def check_active_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"""
    async with get_db_session() as session:
        result = await session.execute(
            select(Subscription)
            .where(Subscription.user_id == user_id)
            .where(Subscription.status == 'active')
            .where(Subscription.end_date > datetime.utcnow())
        )
        return result.scalar_one_or_none() is not None


async def get_subscription_info(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    async with get_db_session() as session:
        result = await session.execute(
            select(Subscription)
            .where(Subscription.user_id == user_id)
            .where(Subscription.status == 'active')
            .where(Subscription.end_date > datetime.utcnow())
            .order_by(Subscription.created_at.desc())
        )
        sub = result.scalar_one_or_none()

        if sub:
            return {
                'plan_name': sub.plan_name,
                'end_date': sub.end_date.strftime('%d.%m.%Y'),
                'days_left': (sub.end_date - datetime.utcnow()).days
            }
        return {}


@router.callback_query(F.data == "buy_subscription")
async def buy_subscription(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id

    async with get_db_session() as session:
        try:
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            if await check_active_subscription(user.user_id):
                sub_info = await get_subscription_info(user.user_id)
                await callback.message.answer(
                    f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {sub_info['end_date']}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {sub_info['days_left']}"
                )
                await callback.answer()
                return

            await show_tariff_selection(callback, user.user_id)
            await callback.answer()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await callback.answer()


@router.callback_query(F.data.startswith("tariff_"))
async def process_tariff_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff_type = callback.data.replace("tariff_", "")
    user_id = callback.from_user.id

    async with get_db_session() as session:
        try:
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            subscription = Subscription(
                user_id=user.user_id,
                plan_type=tariff_type,
                plan_name="–û–±—ã—á–Ω—ã–π" if tariff_type == "regular" else "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π",
                price=PRICES[tariff_type],
                currency="RUB",
                status="pending",
                payment_status="pending"
            )
            session.add(subscription)
            await session.commit()
            await session.refresh(subscription)

            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            # payment_url = await create_payment(subscription.id, subscription.price)

            await callback.message.answer(
                f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {'–û–±—ã—á–Ω—ã–π' if tariff_type == 'regular' else '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π'}\n"
                f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {PRICES[tariff_type]:.2f}‚ÇΩ\n\n"
                "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: [–±—É–¥–µ—Ç –∑–¥–µ—Å—å]\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
                ])
            )
            await callback.answer()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await callback.answer()


@router.callback_query(F.data == "check_payment")
async def check_payment(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    user_id = callback.from_user.id

    async with get_db_session() as session:
        try:
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ò—â–µ–º pending –ø–æ–¥–ø–∏—Å–∫—É
            result = await session.execute(
                select(Subscription)
                .where(Subscription.user_id == user.user_id)
                .where(Subscription.status == 'pending')
                .order_by(Subscription.created_at.desc())
            )
            subscription = result.scalar_one_or_none()

            if not subscription:
                await callback.message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await callback.answer()
                return

            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
            payment_success = True  # await PaymentService.check_payment(subscription.payment_id)

            if payment_success:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                subscription.status = 'active'
                subscription.payment_status = 'completed'
                subscription.start_date = datetime.utcnow()
                subscription.end_date = datetime.utcnow() + timedelta(days=30)
                subscription.updated_at = datetime.utcnow()

                await session.commit()

                await callback.message.answer(
                    f"üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.end_date.strftime('%d.%m.%Y')}\n"
                    f"üí≥ –¢–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
                    f"üí∞ –°—É–º–º–∞: {subscription.price:.2f}‚ÇΩ\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!",
                    parse_mode='HTML'
                )

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                if ADMIN_ID:
                    try:
                        await callback.bot.send_message(
                            ADMIN_ID,
                            f"üí∏ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
                            f"üìß @{user.username or '–Ω–µ—Ç'}\n"
                            f"üÜî ID: {user.user_id}\n"
                            f"üí≥ –¢–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
                            f"üí∞ –°—É–º–º–∞: {subscription.price:.2f}‚ÇΩ"
                        )
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

            else:
                await callback.message.answer("‚åõ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            await callback.answer()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await callback.answer()
