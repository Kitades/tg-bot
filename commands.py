from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from sqlalchemy import select

from config import ADMIN_ID, SUBSCRIPTION_PRICE, URL
from database.models import User, Subscription
from database.session import get_db_session
from keyboard import main_keyboard, show_tariff_selection
from payment import yookassa_service

router = Router()

PRICES = {
    'regular': SUBSCRIPTION_PRICE[1],  # –û–±—ã—á–Ω—ã–π
    'student': SUBSCRIPTION_PRICE[0]  # –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π
}


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    telegram_user = message.from_user

    async with get_db_session() as session:
        try:
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_user.id)
            )
            user = result.scalar_one_or_none()

            if not user:
                user = User(
                    telegram_id=telegram_user.id,
                    username=telegram_user.username,
                    full_name=f"{telegram_user.first_name or ''} {telegram_user.last_name or ''}".strip()
                )
                session.add(user)
                await session.commit()
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {telegram_user.id}")
                await session.refresh(user)

            has_active_sub = await check_active_subscription(user.id)
            welcome_text = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                f"üí∞ –£—á–∞—Å—Ç–∏–µ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –ø–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ - {SUBSCRIPTION_PRICE[1]} —Ä—É–± –≤ –º–µ—Å—è—Ü\n"
                f"üéì –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ - {SUBSCRIPTION_PRICE[0]} —Ä—É–± –≤ –º–µ—Å—è—Ü"
            )

            if has_active_sub:
                sub_info = await get_subscription_info(user.id)
                welcome_text += f"\n\nüéâ <b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {sub_info['end_date']}</b>"
            else:
                welcome_text += "\n\nüìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É"

            await message.answer(
                welcome_text,
                parse_mode='HTML',
                reply_markup=await main_keyboard(has_active_sub)
            )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def check_active_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"""
    async with get_db_session() as session:
        result = await session.execute(
            select(Subscription)
            .where(Subscription.user_id == user_id)
            .where(Subscription.status == 'active')
            .where(Subscription.end_date > datetime.utcnow())
        )
        return result.scalar_one_or_none() is not None


async def get_subscription_info(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    async with get_db_session() as session:
        result = await session.execute(
            select(Subscription)
            .where(Subscription.user_id == user_id)
            .where(Subscription.status == 'active')
            .where(Subscription.end_date > datetime.utcnow())
            .order_by(Subscription.created_at.desc())
        )
        sub = result.scalar_one_or_none()

        if sub:
            return {
                'plan_name': sub.plan_name,
                'end_date': sub.end_date.strftime('%d.%m.%Y'),
                'days_left': (sub.end_date - datetime.utcnow()).days
            }
        return {}


@router.callback_query(F.data == "buy_subscription")
async def buy_subscription(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id

    async with get_db_session() as session:
        try:
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            if await check_active_subscription(user.id):
                sub_info = await get_subscription_info(user.id)
                await callback.message.answer(
                    f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {sub_info['end_date']}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {sub_info['days_left']}"
                )
                await callback.answer()
                return

            await show_tariff_selection(callback)
            await callback.answer()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await callback.answer()


@router.callback_query(F.data.startswith("tariff_"))
async def process_tariff_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff_type = callback.data.replace("tariff_", "")
    user_id = callback.from_user.id

    async with get_db_session() as session:
        try:
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            subscription = Subscription(
                user_id=user.id,
                plan_type=tariff_type,
                plan_name="–û–±—ã—á–Ω—ã–π" if tariff_type == "regular" else "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π",
                price=PRICES[tariff_type],
                currency="RUB",
                status="pending",
                payment_status="pending"
            )
            session.add(subscription)
            await session.commit()
            await session.refresh(subscription)

            try:
                payment = await yookassa_service.create_payment(
                    subscription_id=subscription.id,
                    amount=subscription.price,
                    user_id=user.id,
                    description=f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription.plan_name}"
                )

                subscription.payment_id = payment['payment_id']
                await session.commit()

                await callback.message.answer(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
                    f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {subscription.price:.2f}‚ÇΩ\n\n"
                    f"üîó <a href='{payment['confirmation_url']}'>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>\n\n"
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                                              callback_data=f"check_payment_{subscription.id}")],
                        [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment['confirmation_url'])],
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
                    ])
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await session.delete(subscription)
                await session.commit()

            await callback.answer()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await callback.answer()


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    subscription_id = int(callback.data.replace("check_payment_", ""))
    user_id = callback.from_user.id

    async with get_db_session() as session:
        try:
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            result = await session.execute(
                select(Subscription)
                .where(Subscription.id == subscription_id)
                .where(Subscription.user_id == user.id)
            )
            subscription = result.scalar_one_or_none()

            if not subscription:
                await callback.message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await callback.answer()
                return

            if subscription.status == 'active':
                await callback.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
                await callback.answer()
                return

            if subscription.payment_id:
                try:
                    payment_info = await yookassa_service.check_payment(subscription.payment_id)

                    if payment_info['paid']:
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                        subscription.status = 'active'
                        subscription.payment_status = 'completed'
                        subscription.start_date = datetime.utcnow()
                        subscription.end_date = datetime.utcnow() + timedelta(days=30)
                        subscription.updated_at = datetime.utcnow()

                        await session.commit()

                        await callback.message.answer(
                            f"üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.end_date.strftime('%d.%m.%Y')}\n"
                            f"üí≥ –¢–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
                            f"üí∞ –°—É–º–º–∞: {subscription.price:.2f}‚ÇΩ\n\n"
                            f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!",
                            parse_mode='HTML'
                        )

                        if ADMIN_ID:
                            try:
                                await callback.bot.send_message(
                                    ADMIN_ID,
                                    f"üí∏ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n"
                                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
                                    f"üìß @{user.username or '–Ω–µ—Ç'}\n"
                                    f"üÜî ID: {user.id}\n"
                                    f"üí≥ –¢–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
                                    f"üí∞ –°—É–º–º–∞: {subscription.price:.2f}‚ÇΩ"
                                )
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

                    else:
                        await callback.message.answer(
                            f"‚åõ –ü–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ: {payment_info['status']}\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                        )

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
                    await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await callback.message.answer("‚ùå ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

            await callback.answer()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await callback.answer()


@router.callback_query(F.data == "my_subscription")
async def my_subscription_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'"""
    user_id = callback.from_user.id

    async with get_db_session() as session:
        try:

            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            result = await session.execute(
                select(Subscription)
                .where(Subscription.user_id == user.id)
                .where(Subscription.status == 'active')
                .where(Subscription.end_date > datetime.utcnow())
                .order_by(Subscription.created_at.desc())
            )
            subscription = result.scalar_one_or_none()

            if subscription:

                days_left = (subscription.end_date - datetime.utcnow()).days

                message_text = (
                    f"üìä <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    f"üí≥ –¢–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription.price:.2f}‚ÇΩ\n"
                    f"üìÖ –ù–∞—á–∞–ª–æ: {subscription.start_date.strftime('%d.%m.%Y')}\n"
                    f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {subscription.end_date.strftime('%d.%m.%Y')}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                    f"üîÑ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_data="content")],
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])

            else:

                inactive_result = await session.execute(
                    select(Subscription)
                    .where(Subscription.user_id == user.id)
                    .order_by(Subscription.created_at.desc())
                )
                inactive_sub = inactive_result.scalar_one_or_none()

                if inactive_sub:
                    message_text = (
                        f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
                        f"üí≥ –¢–∞—Ä–∏—Ñ: {inactive_sub.plan_name}\n"
                        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {inactive_sub.price:.2f}‚ÇΩ\n"
                        f"üìÖ –ë—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {inactive_sub.end_date.strftime('%d.%m.%Y')}\n"
                        f"üîÑ –°—Ç–∞—Ç—É—Å: ‚ùå {inactive_sub.status}"
                    )
                else:
                    message_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
                    [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="prices")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])

            await callback.message.edit_text(
                message_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            await callback.answer()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ my_subscription_handler: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ")
            await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    user_id = callback.from_user.id

    async with get_db_session() as session:
        try:
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if user:
                result = await session.execute(
                    select(Subscription)
                    .where(Subscription.user_id == user.id)
                    .where(Subscription.status == 'active')
                    .where(Subscription.end_date > datetime.utcnow())
                )
                has_active_sub = result.scalar_one_or_none() is not None
            else:
                has_active_sub = False

            from keyboard import main_keyboard
            keyboard = await main_keyboard(has_active_sub)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            await callback.message.edit_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=keyboard
            )
            await callback.answer()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_main_handler: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await callback.answer()


@router.callback_query(F.data == "content")
async def content_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–Ω—Ç–µ–Ω—Ç'"""
    user_id = callback.from_user.id

    async with get_db_session() as session:
        try:
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if user:
                result = await session.execute(
                    select(Subscription)
                    .where(Subscription.user_id == user.id)
                    .where(Subscription.status == 'active')
                    .where(Subscription.end_date > datetime.utcnow())
                )
                has_active_sub = result.scalar_one_or_none() is not None
            else:
                has_active_sub = False

            if has_active_sub:
                await callback.message.answer(
                    "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n\n"
                    "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏\n"
                    "‚Ä¢ –í–∏–¥–µ–æ-—É—Ä–æ–∫–∏ –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã\n"
                    "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏\n"
                    "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —ç–∫—Å–ø–µ—Ä—Ç–∞–º\n\n"
                    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª:",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{URL}")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_subscription")]
                    ])
                )
            else:
                await callback.message.answer(
                    "‚ùå <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_subscription")]
                    ])
                )

            await callback.answer()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ content_handler: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await callback.answer()
