import asyncio
from sqlalchemy import text
from database.session import engine, Base, get_db_session_sync, get_db_session


async def check_subscriptions_table_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã subscriptions"""
    async with get_db_session() as session:
        result = await session.execute(text("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'subscriptions'
            ORDER BY ordinal_position
        """))

        print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã subscriptions:")
        for row in result.fetchall():
            print(f"  {row[0]} ({row[1]}, nullable: {row[2]})")


async def recreate_tables():
    """–ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–¥–µ–ª—è–º SQLAlchemy"""
    async with engine.begin() as conn:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        await conn.run_sync(Base.metadata.drop_all)
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –º–æ–¥–µ–ª—è–º
        await conn.run_sync(Base.metadata.create_all)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–¥–µ–ª—è–º")


async def fix_database_structure():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    await check_subscriptions_table_structure()

    # 2. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await recreate_tables()

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    await verify_tables_structure()


async def verify_tables_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è"""
    async with get_db_session_sync() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
        result = await session.execute(text("""
            SELECT COUNT(*) FROM information_schema.columns 
            WHERE table_name = 'users' 
            AND column_name IN ('user_id', 'telegram_id', 'username', 'full_name')
        """))
        users_columns_ok = result.scalar() == 4

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions
        result = await session.execute(text("""
            SELECT COUNT(*) FROM information_schema.columns 
            WHERE table_name = 'subscriptions' 
            AND column_name IN ('id', 'user_id', 'plan_type', 'status', 'end_date')
        """))
        subs_columns_ok = result.scalar() == 5

        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ users: {'OK' if users_columns_ok else 'ERROR'}")
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ subscriptions: {'OK' if subs_columns_ok else 'ERROR'}")

        if users_columns_ok and subs_columns_ok:
            print("üéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è!")
        else:
            print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    asyncio.run(fix_database_structure())
