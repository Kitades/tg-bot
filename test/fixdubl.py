from sqlalchemy import text  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç text
import asyncio
from database.session import get_db_session


async def check_duplicate_users():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with get_db_session() as session:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è —Å—ã—Ä–æ–≥–æ SQL
        result = await session.execute(text("""
            SELECT telegram_id, COUNT(*) 
            FROM users 
            GROUP BY telegram_id 
            HAVING COUNT(*) > 1
        """))
        duplicates = result.fetchall()

        if duplicates:
            print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for telegram_id, count in duplicates:
                print(f"Telegram ID: {telegram_id}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
            return duplicates
        else:
            print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return []


async def remove_duplicate_users():
    """–£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with get_db_session() as session:
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è —Å—ã—Ä–æ–≥–æ SQL
            result = await session.execute(text("""
                DELETE FROM users 
                WHERE user_id NOT IN (
                    SELECT MIN(user_id) 
                    FROM users 
                    GROUP BY telegram_id
                )
            """))

            deleted_count = result.rowcount
            if deleted_count > 0:
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            await session.commit()
            return deleted_count

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            await session.rollback()
            return 0


async def add_unique_constraint():
    """–î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è telegram_id"""
    async with get_db_session() as session:
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è —Å—ã—Ä–æ–≥–æ SQL
            await session.execute(text("""
                ALTER TABLE users 
                ADD CONSTRAINT unique_telegram_id UNIQUE (telegram_id)
            """))
            print("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            await session.commit()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if "already exists" in str(e):
                print("‚ÑπÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await session.rollback()


async def fix_duplicates_problem():
    """–ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏"""
    print("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏...")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    print("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    duplicates = await check_duplicate_users()

    if not duplicates:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
        return

    # 2. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    print("2. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã...")
    await remove_duplicate_users()

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    print("3. –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏...")
    await add_unique_constraint()

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    remaining_duplicates = await check_duplicate_users()

    if not remaining_duplicates:
        print("üéâ –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω–∞!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏")


async def check_database_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with get_db_session() as session:
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            result = await session.execute(text("SELECT COUNT(*) FROM users"))
            user_count = result.scalar()
            print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {user_count}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            result = await session.execute(text("""
                SELECT COUNT(*) FROM (
                    SELECT telegram_id, COUNT(*) 
                    FROM users 
                    GROUP BY telegram_id 
                    HAVING COUNT(*) > 1
                ) AS duplicates
            """))
            duplicate_count = result.scalar()
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {duplicate_count}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏...")
    asyncio.run(fix_duplicates_problem())
    asyncio.run(check_database_health())